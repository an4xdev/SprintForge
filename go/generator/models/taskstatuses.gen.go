// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"generator/model"
)

func newTaskStatus(db *gorm.DB, opts ...gen.DOOption) taskStatus {
	_taskStatus := taskStatus{}

	_taskStatus.taskStatusDo.UseDB(db, opts...)
	_taskStatus.taskStatusDo.UseModel(&model.TaskStatus{})

	tableName := _taskStatus.taskStatusDo.TableName()
	_taskStatus.ALL = field.NewAsterisk(tableName)
	_taskStatus.ID = field.NewInt32(tableName, "Id")
	_taskStatus.Name = field.NewString(tableName, "Name")

	_taskStatus.fillFieldMap()

	return _taskStatus
}

type taskStatus struct {
	taskStatusDo

	ALL  field.Asterisk
	ID   field.Int32
	Name field.String

	fieldMap map[string]field.Expr
}

func (t taskStatus) Table(newTableName string) *taskStatus {
	t.taskStatusDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taskStatus) As(alias string) *taskStatus {
	t.taskStatusDo.DO = *(t.taskStatusDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taskStatus) updateTableName(table string) *taskStatus {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "Id")
	t.Name = field.NewString(table, "Name")

	t.fillFieldMap()

	return t
}

func (t *taskStatus) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taskStatus) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 2)
	t.fieldMap["Id"] = t.ID
	t.fieldMap["Name"] = t.Name
}

func (t taskStatus) clone(db *gorm.DB) taskStatus {
	t.taskStatusDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taskStatus) replaceDB(db *gorm.DB) taskStatus {
	t.taskStatusDo.ReplaceDB(db)
	return t
}

type taskStatusDo struct{ gen.DO }

type ITaskStatusDo interface {
	gen.SubQuery
	Debug() ITaskStatusDo
	WithContext(ctx context.Context) ITaskStatusDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITaskStatusDo
	WriteDB() ITaskStatusDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITaskStatusDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITaskStatusDo
	Not(conds ...gen.Condition) ITaskStatusDo
	Or(conds ...gen.Condition) ITaskStatusDo
	Select(conds ...field.Expr) ITaskStatusDo
	Where(conds ...gen.Condition) ITaskStatusDo
	Order(conds ...field.Expr) ITaskStatusDo
	Distinct(cols ...field.Expr) ITaskStatusDo
	Omit(cols ...field.Expr) ITaskStatusDo
	Join(table schema.Tabler, on ...field.Expr) ITaskStatusDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITaskStatusDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITaskStatusDo
	Group(cols ...field.Expr) ITaskStatusDo
	Having(conds ...gen.Condition) ITaskStatusDo
	Limit(limit int) ITaskStatusDo
	Offset(offset int) ITaskStatusDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskStatusDo
	Unscoped() ITaskStatusDo
	Create(values ...*model.TaskStatus) error
	CreateInBatches(values []*model.TaskStatus, batchSize int) error
	Save(values ...*model.TaskStatus) error
	First() (*model.TaskStatus, error)
	Take() (*model.TaskStatus, error)
	Last() (*model.TaskStatus, error)
	Find() ([]*model.TaskStatus, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskStatus, err error)
	FindInBatches(result *[]*model.TaskStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TaskStatus) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITaskStatusDo
	Assign(attrs ...field.AssignExpr) ITaskStatusDo
	Joins(fields ...field.RelationField) ITaskStatusDo
	Preload(fields ...field.RelationField) ITaskStatusDo
	FirstOrInit() (*model.TaskStatus, error)
	FirstOrCreate() (*model.TaskStatus, error)
	FindByPage(offset int, limit int) (result []*model.TaskStatus, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITaskStatusDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t taskStatusDo) Debug() ITaskStatusDo {
	return t.withDO(t.DO.Debug())
}

func (t taskStatusDo) WithContext(ctx context.Context) ITaskStatusDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskStatusDo) ReadDB() ITaskStatusDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskStatusDo) WriteDB() ITaskStatusDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskStatusDo) Session(config *gorm.Session) ITaskStatusDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskStatusDo) Clauses(conds ...clause.Expression) ITaskStatusDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskStatusDo) Returning(value interface{}, columns ...string) ITaskStatusDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskStatusDo) Not(conds ...gen.Condition) ITaskStatusDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskStatusDo) Or(conds ...gen.Condition) ITaskStatusDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskStatusDo) Select(conds ...field.Expr) ITaskStatusDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskStatusDo) Where(conds ...gen.Condition) ITaskStatusDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskStatusDo) Order(conds ...field.Expr) ITaskStatusDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskStatusDo) Distinct(cols ...field.Expr) ITaskStatusDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskStatusDo) Omit(cols ...field.Expr) ITaskStatusDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskStatusDo) Join(table schema.Tabler, on ...field.Expr) ITaskStatusDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskStatusDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITaskStatusDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskStatusDo) RightJoin(table schema.Tabler, on ...field.Expr) ITaskStatusDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskStatusDo) Group(cols ...field.Expr) ITaskStatusDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskStatusDo) Having(conds ...gen.Condition) ITaskStatusDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskStatusDo) Limit(limit int) ITaskStatusDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskStatusDo) Offset(offset int) ITaskStatusDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskStatusDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskStatusDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskStatusDo) Unscoped() ITaskStatusDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskStatusDo) Create(values ...*model.TaskStatus) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskStatusDo) CreateInBatches(values []*model.TaskStatus, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskStatusDo) Save(values ...*model.TaskStatus) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskStatusDo) First() (*model.TaskStatus, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskStatus), nil
	}
}

func (t taskStatusDo) Take() (*model.TaskStatus, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskStatus), nil
	}
}

func (t taskStatusDo) Last() (*model.TaskStatus, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskStatus), nil
	}
}

func (t taskStatusDo) Find() ([]*model.TaskStatus, error) {
	result, err := t.DO.Find()
	return result.([]*model.TaskStatus), err
}

func (t taskStatusDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskStatus, err error) {
	buf := make([]*model.TaskStatus, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskStatusDo) FindInBatches(result *[]*model.TaskStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskStatusDo) Attrs(attrs ...field.AssignExpr) ITaskStatusDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskStatusDo) Assign(attrs ...field.AssignExpr) ITaskStatusDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskStatusDo) Joins(fields ...field.RelationField) ITaskStatusDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskStatusDo) Preload(fields ...field.RelationField) ITaskStatusDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskStatusDo) FirstOrInit() (*model.TaskStatus, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskStatus), nil
	}
}

func (t taskStatusDo) FirstOrCreate() (*model.TaskStatus, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskStatus), nil
	}
}

func (t taskStatusDo) FindByPage(offset int, limit int) (result []*model.TaskStatus, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskStatusDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskStatusDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskStatusDo) Delete(models ...*model.TaskStatus) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskStatusDo) withDO(do gen.Dao) *taskStatusDo {
	t.DO = *do.(*gen.DO)
	return t
}
