// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"generator/model"
)

func newTaskHistory(db *gorm.DB, opts ...gen.DOOption) taskHistory {
	_taskHistory := taskHistory{}

	_taskHistory.taskHistoryDo.UseDB(db, opts...)
	_taskHistory.taskHistoryDo.UseModel(&model.TaskHistory{})

	tableName := _taskHistory.taskHistoryDo.TableName()
	_taskHistory.ALL = field.NewAsterisk(tableName)
	_taskHistory.ID = field.NewString(tableName, "Id")
	_taskHistory.TaskID = field.NewString(tableName, "TaskId")
	_taskHistory.ChangeDate = field.NewTime(tableName, "ChangeDate")
	_taskHistory.NewStatus = field.NewString(tableName, "NewStatus")
	_taskHistory.OldStatus = field.NewString(tableName, "OldStatus")

	_taskHistory.fillFieldMap()

	return _taskHistory
}

type taskHistory struct {
	taskHistoryDo

	ALL        field.Asterisk
	ID         field.String
	TaskID     field.String
	ChangeDate field.Time
	NewStatus  field.String
	OldStatus  field.String

	fieldMap map[string]field.Expr
}

func (t taskHistory) Table(newTableName string) *taskHistory {
	t.taskHistoryDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taskHistory) As(alias string) *taskHistory {
	t.taskHistoryDo.DO = *(t.taskHistoryDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taskHistory) updateTableName(table string) *taskHistory {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "Id")
	t.TaskID = field.NewString(table, "TaskId")
	t.ChangeDate = field.NewTime(table, "ChangeDate")
	t.NewStatus = field.NewString(table, "NewStatus")
	t.OldStatus = field.NewString(table, "OldStatus")

	t.fillFieldMap()

	return t
}

func (t *taskHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taskHistory) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["Id"] = t.ID
	t.fieldMap["TaskId"] = t.TaskID
	t.fieldMap["ChangeDate"] = t.ChangeDate
	t.fieldMap["NewStatus"] = t.NewStatus
	t.fieldMap["OldStatus"] = t.OldStatus
}

func (t taskHistory) clone(db *gorm.DB) taskHistory {
	t.taskHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taskHistory) replaceDB(db *gorm.DB) taskHistory {
	t.taskHistoryDo.ReplaceDB(db)
	return t
}

type taskHistoryDo struct{ gen.DO }

type ITaskHistoryDo interface {
	gen.SubQuery
	Debug() ITaskHistoryDo
	WithContext(ctx context.Context) ITaskHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITaskHistoryDo
	WriteDB() ITaskHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITaskHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITaskHistoryDo
	Not(conds ...gen.Condition) ITaskHistoryDo
	Or(conds ...gen.Condition) ITaskHistoryDo
	Select(conds ...field.Expr) ITaskHistoryDo
	Where(conds ...gen.Condition) ITaskHistoryDo
	Order(conds ...field.Expr) ITaskHistoryDo
	Distinct(cols ...field.Expr) ITaskHistoryDo
	Omit(cols ...field.Expr) ITaskHistoryDo
	Join(table schema.Tabler, on ...field.Expr) ITaskHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITaskHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITaskHistoryDo
	Group(cols ...field.Expr) ITaskHistoryDo
	Having(conds ...gen.Condition) ITaskHistoryDo
	Limit(limit int) ITaskHistoryDo
	Offset(offset int) ITaskHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskHistoryDo
	Unscoped() ITaskHistoryDo
	Create(values ...*model.TaskHistory) error
	CreateInBatches(values []*model.TaskHistory, batchSize int) error
	Save(values ...*model.TaskHistory) error
	First() (*model.TaskHistory, error)
	Take() (*model.TaskHistory, error)
	Last() (*model.TaskHistory, error)
	Find() ([]*model.TaskHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskHistory, err error)
	FindInBatches(result *[]*model.TaskHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TaskHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITaskHistoryDo
	Assign(attrs ...field.AssignExpr) ITaskHistoryDo
	Joins(fields ...field.RelationField) ITaskHistoryDo
	Preload(fields ...field.RelationField) ITaskHistoryDo
	FirstOrInit() (*model.TaskHistory, error)
	FirstOrCreate() (*model.TaskHistory, error)
	FindByPage(offset int, limit int) (result []*model.TaskHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITaskHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t taskHistoryDo) Debug() ITaskHistoryDo {
	return t.withDO(t.DO.Debug())
}

func (t taskHistoryDo) WithContext(ctx context.Context) ITaskHistoryDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskHistoryDo) ReadDB() ITaskHistoryDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskHistoryDo) WriteDB() ITaskHistoryDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskHistoryDo) Session(config *gorm.Session) ITaskHistoryDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskHistoryDo) Clauses(conds ...clause.Expression) ITaskHistoryDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskHistoryDo) Returning(value interface{}, columns ...string) ITaskHistoryDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskHistoryDo) Not(conds ...gen.Condition) ITaskHistoryDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskHistoryDo) Or(conds ...gen.Condition) ITaskHistoryDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskHistoryDo) Select(conds ...field.Expr) ITaskHistoryDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskHistoryDo) Where(conds ...gen.Condition) ITaskHistoryDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskHistoryDo) Order(conds ...field.Expr) ITaskHistoryDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskHistoryDo) Distinct(cols ...field.Expr) ITaskHistoryDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskHistoryDo) Omit(cols ...field.Expr) ITaskHistoryDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskHistoryDo) Join(table schema.Tabler, on ...field.Expr) ITaskHistoryDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITaskHistoryDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) ITaskHistoryDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskHistoryDo) Group(cols ...field.Expr) ITaskHistoryDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskHistoryDo) Having(conds ...gen.Condition) ITaskHistoryDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskHistoryDo) Limit(limit int) ITaskHistoryDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskHistoryDo) Offset(offset int) ITaskHistoryDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskHistoryDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskHistoryDo) Unscoped() ITaskHistoryDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskHistoryDo) Create(values ...*model.TaskHistory) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskHistoryDo) CreateInBatches(values []*model.TaskHistory, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskHistoryDo) Save(values ...*model.TaskHistory) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskHistoryDo) First() (*model.TaskHistory, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskHistory), nil
	}
}

func (t taskHistoryDo) Take() (*model.TaskHistory, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskHistory), nil
	}
}

func (t taskHistoryDo) Last() (*model.TaskHistory, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskHistory), nil
	}
}

func (t taskHistoryDo) Find() ([]*model.TaskHistory, error) {
	result, err := t.DO.Find()
	return result.([]*model.TaskHistory), err
}

func (t taskHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskHistory, err error) {
	buf := make([]*model.TaskHistory, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskHistoryDo) FindInBatches(result *[]*model.TaskHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskHistoryDo) Attrs(attrs ...field.AssignExpr) ITaskHistoryDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskHistoryDo) Assign(attrs ...field.AssignExpr) ITaskHistoryDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskHistoryDo) Joins(fields ...field.RelationField) ITaskHistoryDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskHistoryDo) Preload(fields ...field.RelationField) ITaskHistoryDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskHistoryDo) FirstOrInit() (*model.TaskHistory, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskHistory), nil
	}
}

func (t taskHistoryDo) FirstOrCreate() (*model.TaskHistory, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskHistory), nil
	}
}

func (t taskHistoryDo) FindByPage(offset int, limit int) (result []*model.TaskHistory, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskHistoryDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskHistoryDo) Delete(models ...*model.TaskHistory) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskHistoryDo) withDO(do gen.Dao) *taskHistoryDo {
	t.DO = *do.(*gen.DO)
	return t
}
