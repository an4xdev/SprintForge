// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"generator/model"
)

func newSprint(db *gorm.DB, opts ...gen.DOOption) sprint {
	_sprint := sprint{}

	_sprint.sprintDo.UseDB(db, opts...)
	_sprint.sprintDo.UseModel(&model.Sprint{})

	tableName := _sprint.sprintDo.TableName()
	_sprint.ALL = field.NewAsterisk(tableName)
	_sprint.ID = field.NewString(tableName, "Id")
	_sprint.Name = field.NewString(tableName, "Name")
	_sprint.StartDate = field.NewTime(tableName, "StartDate")
	_sprint.EndDate = field.NewTime(tableName, "EndDate")
	_sprint.ManagerID = field.NewString(tableName, "ManagerId")
	_sprint.ProjectID = field.NewString(tableName, "ProjectId")
	_sprint.TeamID = field.NewString(tableName, "TeamId")

	_sprint.fillFieldMap()

	return _sprint
}

type sprint struct {
	sprintDo

	ALL       field.Asterisk
	ID        field.String
	Name      field.String
	StartDate field.Time
	EndDate   field.Time
	ManagerID field.String
	ProjectID field.String
	TeamID    field.String

	fieldMap map[string]field.Expr
}

func (s sprint) Table(newTableName string) *sprint {
	s.sprintDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sprint) As(alias string) *sprint {
	s.sprintDo.DO = *(s.sprintDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sprint) updateTableName(table string) *sprint {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "Id")
	s.Name = field.NewString(table, "Name")
	s.StartDate = field.NewTime(table, "StartDate")
	s.EndDate = field.NewTime(table, "EndDate")
	s.ManagerID = field.NewString(table, "ManagerId")
	s.ProjectID = field.NewString(table, "ProjectId")
	s.TeamID = field.NewString(table, "TeamId")

	s.fillFieldMap()

	return s
}

func (s *sprint) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sprint) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["Name"] = s.Name
	s.fieldMap["StartDate"] = s.StartDate
	s.fieldMap["EndDate"] = s.EndDate
	s.fieldMap["ManagerId"] = s.ManagerID
	s.fieldMap["ProjectId"] = s.ProjectID
	s.fieldMap["TeamId"] = s.TeamID
}

func (s sprint) clone(db *gorm.DB) sprint {
	s.sprintDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sprint) replaceDB(db *gorm.DB) sprint {
	s.sprintDo.ReplaceDB(db)
	return s
}

type sprintDo struct{ gen.DO }

type ISprintDo interface {
	gen.SubQuery
	Debug() ISprintDo
	WithContext(ctx context.Context) ISprintDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISprintDo
	WriteDB() ISprintDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISprintDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISprintDo
	Not(conds ...gen.Condition) ISprintDo
	Or(conds ...gen.Condition) ISprintDo
	Select(conds ...field.Expr) ISprintDo
	Where(conds ...gen.Condition) ISprintDo
	Order(conds ...field.Expr) ISprintDo
	Distinct(cols ...field.Expr) ISprintDo
	Omit(cols ...field.Expr) ISprintDo
	Join(table schema.Tabler, on ...field.Expr) ISprintDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISprintDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISprintDo
	Group(cols ...field.Expr) ISprintDo
	Having(conds ...gen.Condition) ISprintDo
	Limit(limit int) ISprintDo
	Offset(offset int) ISprintDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISprintDo
	Unscoped() ISprintDo
	Create(values ...*model.Sprint) error
	CreateInBatches(values []*model.Sprint, batchSize int) error
	Save(values ...*model.Sprint) error
	First() (*model.Sprint, error)
	Take() (*model.Sprint, error)
	Last() (*model.Sprint, error)
	Find() ([]*model.Sprint, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sprint, err error)
	FindInBatches(result *[]*model.Sprint, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sprint) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISprintDo
	Assign(attrs ...field.AssignExpr) ISprintDo
	Joins(fields ...field.RelationField) ISprintDo
	Preload(fields ...field.RelationField) ISprintDo
	FirstOrInit() (*model.Sprint, error)
	FirstOrCreate() (*model.Sprint, error)
	FindByPage(offset int, limit int) (result []*model.Sprint, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISprintDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sprintDo) Debug() ISprintDo {
	return s.withDO(s.DO.Debug())
}

func (s sprintDo) WithContext(ctx context.Context) ISprintDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sprintDo) ReadDB() ISprintDo {
	return s.Clauses(dbresolver.Read)
}

func (s sprintDo) WriteDB() ISprintDo {
	return s.Clauses(dbresolver.Write)
}

func (s sprintDo) Session(config *gorm.Session) ISprintDo {
	return s.withDO(s.DO.Session(config))
}

func (s sprintDo) Clauses(conds ...clause.Expression) ISprintDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sprintDo) Returning(value interface{}, columns ...string) ISprintDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sprintDo) Not(conds ...gen.Condition) ISprintDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sprintDo) Or(conds ...gen.Condition) ISprintDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sprintDo) Select(conds ...field.Expr) ISprintDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sprintDo) Where(conds ...gen.Condition) ISprintDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sprintDo) Order(conds ...field.Expr) ISprintDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sprintDo) Distinct(cols ...field.Expr) ISprintDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sprintDo) Omit(cols ...field.Expr) ISprintDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sprintDo) Join(table schema.Tabler, on ...field.Expr) ISprintDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sprintDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISprintDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sprintDo) RightJoin(table schema.Tabler, on ...field.Expr) ISprintDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sprintDo) Group(cols ...field.Expr) ISprintDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sprintDo) Having(conds ...gen.Condition) ISprintDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sprintDo) Limit(limit int) ISprintDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sprintDo) Offset(offset int) ISprintDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sprintDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISprintDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sprintDo) Unscoped() ISprintDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sprintDo) Create(values ...*model.Sprint) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sprintDo) CreateInBatches(values []*model.Sprint, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sprintDo) Save(values ...*model.Sprint) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sprintDo) First() (*model.Sprint, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sprint), nil
	}
}

func (s sprintDo) Take() (*model.Sprint, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sprint), nil
	}
}

func (s sprintDo) Last() (*model.Sprint, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sprint), nil
	}
}

func (s sprintDo) Find() ([]*model.Sprint, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sprint), err
}

func (s sprintDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sprint, err error) {
	buf := make([]*model.Sprint, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sprintDo) FindInBatches(result *[]*model.Sprint, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sprintDo) Attrs(attrs ...field.AssignExpr) ISprintDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sprintDo) Assign(attrs ...field.AssignExpr) ISprintDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sprintDo) Joins(fields ...field.RelationField) ISprintDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sprintDo) Preload(fields ...field.RelationField) ISprintDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sprintDo) FirstOrInit() (*model.Sprint, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sprint), nil
	}
}

func (s sprintDo) FirstOrCreate() (*model.Sprint, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sprint), nil
	}
}

func (s sprintDo) FindByPage(offset int, limit int) (result []*model.Sprint, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sprintDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sprintDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sprintDo) Delete(models ...*model.Sprint) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sprintDo) withDO(do gen.Dao) *sprintDo {
	s.DO = *do.(*gen.DO)
	return s
}
