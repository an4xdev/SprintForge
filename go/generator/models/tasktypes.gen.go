// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"generator/model"
)

func newTaskType(db *gorm.DB, opts ...gen.DOOption) taskType {
	_taskType := taskType{}

	_taskType.taskTypeDo.UseDB(db, opts...)
	_taskType.taskTypeDo.UseModel(&model.TaskType{})

	tableName := _taskType.taskTypeDo.TableName()
	_taskType.ALL = field.NewAsterisk(tableName)
	_taskType.ID = field.NewInt32(tableName, "Id")
	_taskType.Name = field.NewString(tableName, "Name")

	_taskType.fillFieldMap()

	return _taskType
}

type taskType struct {
	taskTypeDo

	ALL  field.Asterisk
	ID   field.Int32
	Name field.String

	fieldMap map[string]field.Expr
}

func (t taskType) Table(newTableName string) *taskType {
	t.taskTypeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taskType) As(alias string) *taskType {
	t.taskTypeDo.DO = *(t.taskTypeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taskType) updateTableName(table string) *taskType {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "Id")
	t.Name = field.NewString(table, "Name")

	t.fillFieldMap()

	return t
}

func (t *taskType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taskType) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 2)
	t.fieldMap["Id"] = t.ID
	t.fieldMap["Name"] = t.Name
}

func (t taskType) clone(db *gorm.DB) taskType {
	t.taskTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taskType) replaceDB(db *gorm.DB) taskType {
	t.taskTypeDo.ReplaceDB(db)
	return t
}

type taskTypeDo struct{ gen.DO }

type ITaskTypeDo interface {
	gen.SubQuery
	Debug() ITaskTypeDo
	WithContext(ctx context.Context) ITaskTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITaskTypeDo
	WriteDB() ITaskTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITaskTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITaskTypeDo
	Not(conds ...gen.Condition) ITaskTypeDo
	Or(conds ...gen.Condition) ITaskTypeDo
	Select(conds ...field.Expr) ITaskTypeDo
	Where(conds ...gen.Condition) ITaskTypeDo
	Order(conds ...field.Expr) ITaskTypeDo
	Distinct(cols ...field.Expr) ITaskTypeDo
	Omit(cols ...field.Expr) ITaskTypeDo
	Join(table schema.Tabler, on ...field.Expr) ITaskTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITaskTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITaskTypeDo
	Group(cols ...field.Expr) ITaskTypeDo
	Having(conds ...gen.Condition) ITaskTypeDo
	Limit(limit int) ITaskTypeDo
	Offset(offset int) ITaskTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskTypeDo
	Unscoped() ITaskTypeDo
	Create(values ...*model.TaskType) error
	CreateInBatches(values []*model.TaskType, batchSize int) error
	Save(values ...*model.TaskType) error
	First() (*model.TaskType, error)
	Take() (*model.TaskType, error)
	Last() (*model.TaskType, error)
	Find() ([]*model.TaskType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskType, err error)
	FindInBatches(result *[]*model.TaskType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TaskType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITaskTypeDo
	Assign(attrs ...field.AssignExpr) ITaskTypeDo
	Joins(fields ...field.RelationField) ITaskTypeDo
	Preload(fields ...field.RelationField) ITaskTypeDo
	FirstOrInit() (*model.TaskType, error)
	FirstOrCreate() (*model.TaskType, error)
	FindByPage(offset int, limit int) (result []*model.TaskType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITaskTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t taskTypeDo) Debug() ITaskTypeDo {
	return t.withDO(t.DO.Debug())
}

func (t taskTypeDo) WithContext(ctx context.Context) ITaskTypeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskTypeDo) ReadDB() ITaskTypeDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskTypeDo) WriteDB() ITaskTypeDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskTypeDo) Session(config *gorm.Session) ITaskTypeDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskTypeDo) Clauses(conds ...clause.Expression) ITaskTypeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskTypeDo) Returning(value interface{}, columns ...string) ITaskTypeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskTypeDo) Not(conds ...gen.Condition) ITaskTypeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskTypeDo) Or(conds ...gen.Condition) ITaskTypeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskTypeDo) Select(conds ...field.Expr) ITaskTypeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskTypeDo) Where(conds ...gen.Condition) ITaskTypeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskTypeDo) Order(conds ...field.Expr) ITaskTypeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskTypeDo) Distinct(cols ...field.Expr) ITaskTypeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskTypeDo) Omit(cols ...field.Expr) ITaskTypeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskTypeDo) Join(table schema.Tabler, on ...field.Expr) ITaskTypeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITaskTypeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) ITaskTypeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskTypeDo) Group(cols ...field.Expr) ITaskTypeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskTypeDo) Having(conds ...gen.Condition) ITaskTypeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskTypeDo) Limit(limit int) ITaskTypeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskTypeDo) Offset(offset int) ITaskTypeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskTypeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskTypeDo) Unscoped() ITaskTypeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskTypeDo) Create(values ...*model.TaskType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskTypeDo) CreateInBatches(values []*model.TaskType, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskTypeDo) Save(values ...*model.TaskType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskTypeDo) First() (*model.TaskType, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskType), nil
	}
}

func (t taskTypeDo) Take() (*model.TaskType, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskType), nil
	}
}

func (t taskTypeDo) Last() (*model.TaskType, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskType), nil
	}
}

func (t taskTypeDo) Find() ([]*model.TaskType, error) {
	result, err := t.DO.Find()
	return result.([]*model.TaskType), err
}

func (t taskTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskType, err error) {
	buf := make([]*model.TaskType, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskTypeDo) FindInBatches(result *[]*model.TaskType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskTypeDo) Attrs(attrs ...field.AssignExpr) ITaskTypeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskTypeDo) Assign(attrs ...field.AssignExpr) ITaskTypeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskTypeDo) Joins(fields ...field.RelationField) ITaskTypeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskTypeDo) Preload(fields ...field.RelationField) ITaskTypeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskTypeDo) FirstOrInit() (*model.TaskType, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskType), nil
	}
}

func (t taskTypeDo) FirstOrCreate() (*model.TaskType, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskType), nil
	}
}

func (t taskTypeDo) FindByPage(offset int, limit int) (result []*model.TaskType, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskTypeDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskTypeDo) Delete(models ...*model.TaskType) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskTypeDo) withDO(do gen.Dao) *taskTypeDo {
	t.DO = *do.(*gen.DO)
	return t
}
