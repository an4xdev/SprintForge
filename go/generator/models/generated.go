// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q           = new(Query)
	Company     *company
	Project     *project
	Sprint      *sprint
	Task        *task
	TaskHistory *taskHistory
	TaskStatus  *taskStatus
	TaskType    *taskType
	Team        *team
	User        *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Company = &Q.Company
	Project = &Q.Project
	Sprint = &Q.Sprint
	Task = &Q.Task
	TaskHistory = &Q.TaskHistory
	TaskStatus = &Q.TaskStatus
	TaskType = &Q.TaskType
	Team = &Q.Team
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:          db,
		Company:     newCompany(db, opts...),
		Project:     newProject(db, opts...),
		Sprint:      newSprint(db, opts...),
		Task:        newTask(db, opts...),
		TaskHistory: newTaskHistory(db, opts...),
		TaskStatus:  newTaskStatus(db, opts...),
		TaskType:    newTaskType(db, opts...),
		Team:        newTeam(db, opts...),
		User:        newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Company     company
	Project     project
	Sprint      sprint
	Task        task
	TaskHistory taskHistory
	TaskStatus  taskStatus
	TaskType    taskType
	Team        team
	User        user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		Company:     q.Company.clone(db),
		Project:     q.Project.clone(db),
		Sprint:      q.Sprint.clone(db),
		Task:        q.Task.clone(db),
		TaskHistory: q.TaskHistory.clone(db),
		TaskStatus:  q.TaskStatus.clone(db),
		TaskType:    q.TaskType.clone(db),
		Team:        q.Team.clone(db),
		User:        q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		Company:     q.Company.replaceDB(db),
		Project:     q.Project.replaceDB(db),
		Sprint:      q.Sprint.replaceDB(db),
		Task:        q.Task.replaceDB(db),
		TaskHistory: q.TaskHistory.replaceDB(db),
		TaskStatus:  q.TaskStatus.replaceDB(db),
		TaskType:    q.TaskType.replaceDB(db),
		Team:        q.Team.replaceDB(db),
		User:        q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Company     ICompanyDo
	Project     IProjectDo
	Sprint      ISprintDo
	Task        ITaskDo
	TaskHistory ITaskHistoryDo
	TaskStatus  ITaskStatusDo
	TaskType    ITaskTypeDo
	Team        ITeamDo
	User        IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Company:     q.Company.WithContext(ctx),
		Project:     q.Project.WithContext(ctx),
		Sprint:      q.Sprint.WithContext(ctx),
		Task:        q.Task.WithContext(ctx),
		TaskHistory: q.TaskHistory.WithContext(ctx),
		TaskStatus:  q.TaskStatus.WithContext(ctx),
		TaskType:    q.TaskType.WithContext(ctx),
		Team:        q.Team.WithContext(ctx),
		User:        q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
