services:
    # frontend:
    #     build:
    #         context: ./frontend
    #         dockerfile: Dockerfile
    #     ports:
    #         - 3000:80
    #     networks:
    #         - mynetwork
    #     depends_on:
    #         - gateway

    gateway:
        build:
            context: .
            dockerfile: ApiGateway/Dockerfile
        ports:
            - 80:80
            - 443:443
        environment:
            - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
            - ASPNETCORE_URLS=${ASPNETCORE_HTTPS_URLS}
            - ASPNETCORE_Kestrel__Certificates__Default__Password=${CERT_PASSWORD}
            - ASPNETCORE_Kestrel__Certificates__Default__Path=${CERT_PATH}
            - ENABLE_SCALAR=${ENABLE_SCALAR}
            - JWT_TOKEN=${JWT_TOKEN}
            - JWT_ISSUER=${JWT_ISSUER}
            - JWT_AUDIENCE=${JWT_AUDIENCE}
            - REDIS_HOST=${REDIS_HOST}
            - REDIS_PORT=${REDIS_PORT}
            - FRONTEND_URL=${FRONTEND_URL}
        depends_on:
            auth:
                condition: service_healthy
            goservice:
                condition: service_healthy
            fast_api:
                condition: service_healthy
            spring:
                condition: service_healthy
            laravel:
                condition: service_healthy
            js_express:
                condition: service_healthy
            reports:
                condition: service_healthy
        networks:
            - mynetwork
        volumes:
            - ~/.aspnet/https:/https:ro

    auth:
        build:
            context: .
            dockerfile: AuthService/Dockerfile
        ports:
            - 8080:80
        environment:
            - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
            - ASPNETCORE_URLS=${ASPNETCORE_HTTP_URLS}
            - ENABLE_SCALAR=${ENABLE_SCALAR}
            - MINIO_ACCESS_KEY_ID=${MINIO_ACCESS_KEY_ID}
            - MINIO_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
            - MINIO_BUCKET=${MINIO_BUCKET}
            - MINIO_ENDPOINT=${MINIO_ENDPOINT}
            - MINIO_USE_PATH_STYLE_ENDPOINT=${MINIO_USE_PATH_STYLE_ENDPOINT}
            - MINIO_PUBLIC_URL=${MINIO_PUBLIC_URL}
            - JWT_TOKEN=${JWT_TOKEN}
            - JWT_ISSUER=${JWT_ISSUER}
            - JWT_AUDIENCE=${JWT_AUDIENCE}
            - REDIS_HOST=${REDIS_HOST}
            - REDIS_PORT=${REDIS_PORT}
            - DB_HOST=${DB_HOST}
            - DB_DATABASE=${DB_DATABASE}
            - DB_USERNAME=${DB_USERNAME}
            - DB_PASSWORD=${DB_PASSWORD}
            - RABBITMQ_HOST=${RABBITMQ_HOST}
            - RABBITMQ_PORT=${RABBITMQ_PORT}
            - RABBITMQ_USER=${RABBITMQ_USER}
            - RABBITMQ_PASS=${RABBITMQ_PASS}
        depends_on:
            db_manager:
                condition: service_healthy
            redis:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        networks:
            - mynetwork

    db_manager:
        build:
            context: .
            dockerfile: DatabaseManager/Dockerfile
        ports:
            - 8090:80
        environment:
            - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
            - ASPNETCORE_URLS=${ASPNETCORE_HTTP_URLS}
            - ENABLE_SCALAR=${ENABLE_SCALAR}
            - DB_HOST=${DB_HOST}
            - DB_DATABASE=${DB_DATABASE}
            - DB_USERNAME=${DB_USERNAME}
            - DB_PASSWORD=${DB_PASSWORD}
        depends_on:
            database:
                condition: service_healthy
        networks:
            - mynetwork

    redis:
        image: redis:latest
        ports:
            - 6379:6379
        volumes:
            - redis_data:/data
        networks:
            - mynetwork
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 3s
            retries: 3
            start_period: 10s

    redisinsight:
        image: redislabs/redisinsight:latest
        ports:
            - 5540:5540
        depends_on:
            redis:
                condition: service_healthy
        networks:
            - mynetwork
        healthcheck:
            test: ["CMD", "wget", "-qO-", "http://localhost:5540/health"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 20s

    goservice:
        build:
            context: ./go
            dockerfile: Dockerfile
        ports:
            - 8081:8080
        depends_on:
            rabbitmq:
                condition: service_healthy
            db_manager:
                condition: service_healthy
            redis:
                condition: service_healthy
        networks:
            - mynetwork
        environment:
            - RABBITMQ_HOST=${RABBITMQ_HOST}
            - RABBITMQ_PORT=${RABBITMQ_PORT}
            - RABBITMQ_USER=${RABBITMQ_USER}
            - RABBITMQ_PASS=${RABBITMQ_PASS}
            - REDIS_HOST=${REDIS_HOST}
            - REDIS_PORT=${REDIS_PORT}
            - JWT_TOKEN=${JWT_TOKEN}
            - JWT_ISSUER=${JWT_ISSUER}
            - JWT_AUDIENCE=${JWT_AUDIENCE}
            - DB_HOST=${DB_HOST}
            - DB_PORT=${DB_PORT}
            - DB_DATABASE=${DB_DATABASE}
            - DB_USERNAME=${DB_USERNAME}
            - DB_PASSWORD=${DB_PASSWORD}

    fast_api:
        build:
            context: ./fast_api
            dockerfile: Dockerfile
        networks:
            - mynetwork
        ports:
            - 7071:8000
        depends_on:
            rabbitmq:
                condition: service_healthy
            db_manager:
                condition: service_started
        environment:
            - RABBITMQ_HOST=${RABBITMQ_HOST}
            - RABBITMQ_PORT=${RABBITMQ_PORT}
            - RABBITMQ_USER=${RABBITMQ_USER}
            - RABBITMQ_PASS=${RABBITMQ_PASS}
            - DB_HOST=${DB_HOST}
            - DB_PORT=${DB_PORT}
            - DB_DATABASE=${DB_DATABASE}
            - DB_USERNAME=${DB_USERNAME}
            - DB_PASSWORD=${DB_PASSWORD}

    spring:
        build:
            context: ./JavaService
            dockerfile: Dockerfile
        networks:
            - mynetwork
        ports:
            - 2020:8080
        environment:
            - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
            - DB_USERNAME=${DB_USERNAME}
            - DB_PASSWORD=${DB_PASSWORD}
            - SPRING_RABBITMQ_HOST=${RABBITMQ_HOST}
            - SPRING_RABBITMQ_PORT=${RABBITMQ_PORT}
            - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USER}
            - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PASS}
        depends_on:
            db_manager:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy

    laravel:
        build:
            context: ./laravel
            dockerfile: Dockerfile
        volumes:
            - ./laravel/app:/var/www/app
            - ./laravel/bootstrap:/var/www/bootstrap
            - ./laravel/config:/var/www/config
            - ./laravel/database:/var/www/database
            - ./laravel/public:/var/www/public
            - ./laravel/resources:/var/www/resources
            - ./laravel/routes:/var/www/routes
            - ./laravel/storage:/var/www/storage
        environment:
            - DB_CONNECTION=${DB_CONNECTION}
            - DB_HOST=${DB_HOST}
            - DB_PORT=${DB_PORT}
            - DB_DATABASE=${DB_DATABASE}
            - DB_USERNAME=${DB_USERNAME}
            - DB_PASSWORD=${DB_PASSWORD}
            - RABBITMQ_HOST=${RABBITMQ_HOST}
            - RABBITMQ_PORT=${RABBITMQ_PORT}
            - RABBITMQ_USER=${RABBITMQ_USER}
            - RABBITMQ_PASS=${RABBITMQ_PASS}
        networks:
            - mynetwork
        depends_on:
            db_manager:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        healthcheck:
            test: ["CMD-SHELL", "php-fpm -t && php artisan --version"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 30s

    reports:
        build:
            context: ./reports-service
            dockerfile: Dockerfile
        networks:
            - mynetwork
        ports:
            - 8069:8080
        depends_on:
            db_manager:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        environment:
            - DB_HOST=${DB_HOST}
            - DB_PORT=${DB_PORT}
            - DB_DATABASE=${DB_DATABASE}
            - DB_USER=${DB_USERNAME}
            - DB_PASSWORD=${DB_PASSWORD}
            - RABBITMQ_HOST=${RABBITMQ_HOST}
            - RABBITMQ_PORT=${RABBITMQ_PORT}
            - RABBITMQ_USER=${RABBITMQ_USER}
            - RABBITMQ_PASS=${RABBITMQ_PASS}

    nginx:
        image: nginx:alpine
        ports:
            - 7000:80
        volumes:
            - ./laravel/public:/var/www/public
            - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
        networks:
            - mynetwork
        depends_on:
            laravel:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "wget", "-qO-", "http://localhost/health"]
            interval: 10s
            timeout: 5s
            retries: 3
    js_express:
        build:
            context: ./js_express
            dockerfile: Dockerfile
        networks:
            - mynetwork
        ports:
            - 6713:6713
        environment:
            - DB_HOST=${DB_HOST}
            - DB_PORT=${DB_PORT}
            - DB_DATABASE=${DB_DATABASE}
            - DB_USERNAME=${DB_USERNAME}
            - DB_PASSWORD=${DB_PASSWORD}
            - RABBITMQ_HOST=${RABBITMQ_HOST}
            - RABBITMQ_PORT=${RABBITMQ_PORT}
            - RABBITMQ_USER=${RABBITMQ_USER}
            - RABBITMQ_PASS=${RABBITMQ_PASS}
        depends_on:
            db_manager:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy

    pgadmin:
        image: dpage/pgadmin4
        ports:
            - 15433:80
        depends_on:
            database:
                condition: service_healthy
        networks:
            - mynetwork
        environment:
            - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
            - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
        healthcheck:
            test: ["CMD", "wget", "-qO-", "http://localhost:80/misc/ping"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 30s

    database:
        image: postgres
        ports:
            - 5432:5432
        networks:
            - mynetwork
        environment:
            - POSTGRES_USER=${DB_USERNAME}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
            - POSTGRES_DB=${DB_DATABASE}
        volumes:
            - pgdata:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 5s
            timeout: 5s
            retries: 5
            start_period: 10s

    rabbitmq:
        image: rabbitmq:3-management
        ports:
            - 5672:5672
            - 15672:15672
        environment:
            - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
            - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
        networks:
            - mynetwork
        healthcheck:
            test: ["CMD", "rabbitmq-diagnostics", "status"]
            interval: 10s
            timeout: 30s
            retries: 5
            start_period: 40s

    minio:
        build:
            context: ./minio
            dockerfile: Dockerfile
        container_name: minio
        ports:
            - 9000:9000 # API MinIO (S3)
            - 9090:9090 # MinIO Console (UI)
        environment:
            - MINIO_ROOT_USER=${MINIO_ACCESS_KEY_ID}
            - MINIO_ROOT_PASSWORD=${MINIO_SECRET_ACCESS_KEY}
            - MINIO_SERVER_URL=${MINIO_SERVER_URL}
            - MINIO_CONSOLE_ADDRESS=${MINIO_CONSOLE_ADDRESS}
        volumes:
            - minio_data:/data
        networks:
            - mynetwork
        healthcheck:
            test:
                ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 20s
networks:
    mynetwork:
        driver: bridge

volumes:
    pgdata:
    minio_data:
    redis_data:
